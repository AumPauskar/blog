<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structures on Aum&#39;s blogging site</title>
    <link>https://aumpauskar.github.io/blog/tags/data-structures/</link>
    <description>Recent content in Data Structures on Aum&#39;s blogging site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Nov 2023 10:38:34 +0530</lastBuildDate>
    <atom:link href="https://aumpauskar.github.io/blog/tags/data-structures/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic DSA algorithms using C</title>
      <link>https://aumpauskar.github.io/blog/posts/dsa/dsabasics/</link>
      <pubDate>Thu, 16 Nov 2023 10:38:34 +0530</pubDate>
      <guid>https://aumpauskar.github.io/blog/posts/dsa/dsabasics/</guid>
      <description>A complete guide ds Termwork 1 - Infix evaluation Algorithm Create an empty stack (operandStack) to store operands and an empty stack (operatorStack) to store operators. Initialize a variable (result) to store the final output Iterate through each character of the infix expression. If the current character is an operand, add it to the operandStack. If the current character is an operator, pop operators from operatorStack and add them to operandStack until an operator with lower precedence is found.</description>
    </item>
  </channel>
</rss>
